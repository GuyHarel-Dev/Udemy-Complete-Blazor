@page "/authors/"
@using BookStoreApp.Models
@using BookStoreApp.Models.Author
@using BookStoreApp.Services
@using BookStoreApp.Services.Interfaces
@* @using BookStoreApp.Blazor.WebAssembly.UI.Pages.Authors *@

@inject IAuthorService authService
@inject IJSRuntime js

<h3>Index</h3>

@if (Response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@Response.Message</h4>
    </div>
}

@if (Authors == null)
{
    <div class="alerd alert-info">Loading data...</div>
}

else
{
    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView Roles="Administrator">
        <a class="btn btn-primary" href="/authors/create"> <span class="oi oi-plus" aria-hidden="true"></span>  Create</a>
    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

    <br/>

    <AuthorTable Authors="Authors" TotalSize="TotalSize" OnScroll="LoadAuthors">

    </AuthorTable>


}

@code {
    private List<AuthorReadDto> Authors = new List<AuthorReadDto>();

    private Response<VirtualizeResponse<AuthorReadDto>> Response = new Response<VirtualizeResponse<AuthorReadDto>> { Success = true };
    private int TotalSize { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Response = await authService.GetAuthorsPage(new QueryParameters { StartIndex = 0});
        // if (Response.Success)
        // {
        //     Authors = Response.Data.Items;
        // }

        await LoadAuthors(new QueryParameters { StartIndex = 0 });
    }

    private async Task LoadAuthors(QueryParameters queryParams)
    {
        var virtualResponse = await authService.GetAuthorsPage(queryParams);
        Authors = virtualResponse.Data.Items;
        TotalSize = virtualResponse.Data.TotalSize;

    }

    private async Task Delete(int authorId)
    {
        var confirm = await js.InvokeAsync<bool>("confirm", $"êtes vous certain de détruire ?");

        if (!confirm)
            return;

        await authService.DeleteAuthor(authorId);
        if (Response.Success)
        {
            Authors = Response.Data.Items;
            await OnInitializedAsync();
        }
    }
}
