@page "/authors/"
@using BookStoreApp.Models.Author
@using BookStoreApp.Services
@using BookStoreApp.Services.Interfaces

@inject IAuthorService authService

<h3>Index</h3>

@if (Response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@Response.Message</h4>
    </div>
}

@if (Authors == null)
{
    <div class="alerd alert-info">Loading data...</div>
}

else
{
    <a class="btn btn-primary" href="/authors/create"> <span class="oi oi-plus" aria-hidden="true"></span>  Create</a>
    <br/>
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Action</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var author in Authors)
            {
                <tr>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-book" aria-hidden="true"></span>Details</a>
                        <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Update</a>
                        <a class="btn btn-danger" href="/authors/delete"><span class="oi oi-delete" aria-hidden="true"></span>Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ICollection<AuthorReadDto> Authors;
    private Response<List<AuthorReadDto>> Response = new Response<List<AuthorReadDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        Response = await authService.GetAuthors();
        if (Response.Success)
        {
            Authors = Response.Data;
        }
    }
}
