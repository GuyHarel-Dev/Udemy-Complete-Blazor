@page "/users/login"

@using BookStoreApp.Services
@using BookStoreApp.Models
@using BookStoreApp.Services.Interfaces

@inject IBookStoreApiService authService
@inject NavigationManager navManager

<h3>Login</h3>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>

    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary btn-block">Login</button>

    </EditForm>
</div>

@code {
    LoginUserDto LoginModel = new LoginUserDto
        {
            Email = "bibi@coco.com",
            Password = "fWY0YB1D_0RdJJcZ"
        };

    string message = string.Empty;

    public async Task HandleLogin()
    {
        try
        {
            var response = await authService.AuthenticateAsync(LoginModel);

            if (response)
            {
                navManager.NavigateTo("/");
            }

            message = "Invalid Credentials, Please Try Again";
        }
        catch (ApiException ex)
        {
            message = ex.Message;
            // throw;
        }
        catch (Exception ex)
        {
            message = ex.Message;
            // throw;
        }

    }
}
